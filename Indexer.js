//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var document_ttypes = require('./document_types')


var ttypes = require('./indexer_types');
//HELPER FUNCTIONS AND STRUCTURES

Indexer_indexArtist_args = function(args) {
  this.artistToIndex = null;
  if (args) {
    if (args.artistToIndex !== undefined) {
      this.artistToIndex = args.artistToIndex;
    }
  }
};
Indexer_indexArtist_args.prototype = {};
Indexer_indexArtist_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.artistToIndex = new document_ttypes.Artist();
        this.artistToIndex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_indexArtist_args.prototype.write = function(output) {
  output.writeStructBegin('Indexer_indexArtist_args');
  if (this.artistToIndex !== null && this.artistToIndex !== undefined) {
    output.writeFieldBegin('artistToIndex', Thrift.Type.STRUCT, 1);
    this.artistToIndex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_indexArtist_result = function(args) {
};
Indexer_indexArtist_result.prototype = {};
Indexer_indexArtist_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_indexArtist_result.prototype.write = function(output) {
  output.writeStructBegin('Indexer_indexArtist_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_indexAlbum_args = function(args) {
  this.albumToIndex = null;
  if (args) {
    if (args.albumToIndex !== undefined) {
      this.albumToIndex = args.albumToIndex;
    }
  }
};
Indexer_indexAlbum_args.prototype = {};
Indexer_indexAlbum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.albumToIndex = new document_ttypes.Album();
        this.albumToIndex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_indexAlbum_args.prototype.write = function(output) {
  output.writeStructBegin('Indexer_indexAlbum_args');
  if (this.albumToIndex !== null && this.albumToIndex !== undefined) {
    output.writeFieldBegin('albumToIndex', Thrift.Type.STRUCT, 1);
    this.albumToIndex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_indexAlbum_result = function(args) {
};
Indexer_indexAlbum_result.prototype = {};
Indexer_indexAlbum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_indexAlbum_result.prototype.write = function(output) {
  output.writeStructBegin('Indexer_indexAlbum_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_query_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
Indexer_query_args.prototype = {};
Indexer_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new document_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_query_args.prototype.write = function(output) {
  output.writeStructBegin('Indexer_query_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_query_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Indexer_query_result.prototype = {};
Indexer_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new document_ttypes.QueryResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_query_result.prototype.write = function(output) {
  output.writeStructBegin('Indexer_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_reset_args = function(args) {
};
Indexer_reset_args.prototype = {};
Indexer_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_reset_args.prototype.write = function(output) {
  output.writeStructBegin('Indexer_reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_reset_result = function(args) {
};
Indexer_reset_result.prototype = {};
Indexer_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_reset_result.prototype.write = function(output) {
  output.writeStructBegin('Indexer_reset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_ping_args = function(args) {
};
Indexer_ping_args.prototype = {};
Indexer_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Indexer_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Indexer_ping_result = function(args) {
};
Indexer_ping_result.prototype = {};
Indexer_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Indexer_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Indexer_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
IndexerClient.prototype = {};
IndexerClient.prototype.indexArtist = function(artistToIndex, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_indexArtist(artistToIndex);
};

IndexerClient.prototype.send_indexArtist = function(artistToIndex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('indexArtist', Thrift.MessageType.CALL, this.seqid);
  var args = new Indexer_indexArtist_args();
  args.artistToIndex = artistToIndex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IndexerClient.prototype.recv_indexArtist = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Indexer_indexArtist_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
IndexerClient.prototype.indexAlbum = function(albumToIndex, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_indexAlbum(albumToIndex);
};

IndexerClient.prototype.send_indexAlbum = function(albumToIndex) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('indexAlbum', Thrift.MessageType.CALL, this.seqid);
  var args = new Indexer_indexAlbum_args();
  args.albumToIndex = albumToIndex;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IndexerClient.prototype.recv_indexAlbum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Indexer_indexAlbum_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
IndexerClient.prototype.query = function(query, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_query(query);
};

IndexerClient.prototype.send_query = function(query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Indexer_query_args();
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IndexerClient.prototype.recv_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Indexer_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('query failed: unknown result');
};
IndexerClient.prototype.reset = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_reset();
};

IndexerClient.prototype.send_reset = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid);
  var args = new Indexer_reset_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IndexerClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Indexer_reset_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
IndexerClient.prototype.ping = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_ping();
};

IndexerClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Indexer_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IndexerClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Indexer_ping_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
IndexerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
IndexerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

IndexerProcessor.prototype.process_indexArtist = function(seqid, input, output) {
  var args = new Indexer_indexArtist_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.indexArtist(args.artistToIndex, function (err, result) {
    var result = new Indexer_indexArtist_result((err != null ? err : {success: result}));
    output.writeMessageBegin("indexArtist", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

IndexerProcessor.prototype.process_indexAlbum = function(seqid, input, output) {
  var args = new Indexer_indexAlbum_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.indexAlbum(args.albumToIndex, function (err, result) {
    var result = new Indexer_indexAlbum_result((err != null ? err : {success: result}));
    output.writeMessageBegin("indexAlbum", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

IndexerProcessor.prototype.process_query = function(seqid, input, output) {
  var args = new Indexer_query_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.query(args.query, function (err, result) {
    var result = new Indexer_query_result((err != null ? err : {success: result}));
    output.writeMessageBegin("query", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

IndexerProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new Indexer_reset_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.reset(function (err, result) {
    var result = new Indexer_reset_result((err != null ? err : {success: result}));
    output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

IndexerProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new Indexer_ping_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.ping(function (err, result) {
    var result = new Indexer_ping_result((err != null ? err : {success: result}));
    output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

